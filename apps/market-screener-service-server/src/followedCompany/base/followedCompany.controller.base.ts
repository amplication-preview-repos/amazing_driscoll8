/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FollowedCompanyService } from "../followedCompany.service";
import { FollowedCompanyCreateInput } from "./FollowedCompanyCreateInput";
import { FollowedCompany } from "./FollowedCompany";
import { FollowedCompanyFindManyArgs } from "./FollowedCompanyFindManyArgs";
import { FollowedCompanyWhereUniqueInput } from "./FollowedCompanyWhereUniqueInput";
import { FollowedCompanyUpdateInput } from "./FollowedCompanyUpdateInput";

export class FollowedCompanyControllerBase {
  constructor(protected readonly service: FollowedCompanyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FollowedCompany })
  async createFollowedCompany(
    @common.Body() data: FollowedCompanyCreateInput
  ): Promise<FollowedCompany> {
    return await this.service.createFollowedCompany({
      data: {
        ...data,

        stock: data.stock
          ? {
              connect: data.stock,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,

        stock: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FollowedCompany] })
  @ApiNestedQuery(FollowedCompanyFindManyArgs)
  async followedCompanies(
    @common.Req() request: Request
  ): Promise<FollowedCompany[]> {
    const args = plainToClass(FollowedCompanyFindManyArgs, request.query);
    return this.service.followedCompanies({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,

        stock: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FollowedCompany })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async followedCompany(
    @common.Param() params: FollowedCompanyWhereUniqueInput
  ): Promise<FollowedCompany | null> {
    const result = await this.service.followedCompany({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,

        stock: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FollowedCompany })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFollowedCompany(
    @common.Param() params: FollowedCompanyWhereUniqueInput,
    @common.Body() data: FollowedCompanyUpdateInput
  ): Promise<FollowedCompany | null> {
    try {
      return await this.service.updateFollowedCompany({
        where: params,
        data: {
          ...data,

          stock: data.stock
            ? {
                connect: data.stock,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,

          stock: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FollowedCompany })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFollowedCompany(
    @common.Param() params: FollowedCompanyWhereUniqueInput
  ): Promise<FollowedCompany | null> {
    try {
      return await this.service.deleteFollowedCompany({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          userId: true,

          stock: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
