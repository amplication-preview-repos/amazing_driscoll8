/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FollowedCompany } from "./FollowedCompany";
import { FollowedCompanyCountArgs } from "./FollowedCompanyCountArgs";
import { FollowedCompanyFindManyArgs } from "./FollowedCompanyFindManyArgs";
import { FollowedCompanyFindUniqueArgs } from "./FollowedCompanyFindUniqueArgs";
import { CreateFollowedCompanyArgs } from "./CreateFollowedCompanyArgs";
import { UpdateFollowedCompanyArgs } from "./UpdateFollowedCompanyArgs";
import { DeleteFollowedCompanyArgs } from "./DeleteFollowedCompanyArgs";
import { Stock } from "../../stock/base/Stock";
import { FollowedCompanyService } from "../followedCompany.service";
@graphql.Resolver(() => FollowedCompany)
export class FollowedCompanyResolverBase {
  constructor(protected readonly service: FollowedCompanyService) {}

  async _followedCompaniesMeta(
    @graphql.Args() args: FollowedCompanyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FollowedCompany])
  async followedCompanies(
    @graphql.Args() args: FollowedCompanyFindManyArgs
  ): Promise<FollowedCompany[]> {
    return this.service.followedCompanies(args);
  }

  @graphql.Query(() => FollowedCompany, { nullable: true })
  async followedCompany(
    @graphql.Args() args: FollowedCompanyFindUniqueArgs
  ): Promise<FollowedCompany | null> {
    const result = await this.service.followedCompany(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FollowedCompany)
  async createFollowedCompany(
    @graphql.Args() args: CreateFollowedCompanyArgs
  ): Promise<FollowedCompany> {
    return await this.service.createFollowedCompany({
      ...args,
      data: {
        ...args.data,

        stock: args.data.stock
          ? {
              connect: args.data.stock,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FollowedCompany)
  async updateFollowedCompany(
    @graphql.Args() args: UpdateFollowedCompanyArgs
  ): Promise<FollowedCompany | null> {
    try {
      return await this.service.updateFollowedCompany({
        ...args,
        data: {
          ...args.data,

          stock: args.data.stock
            ? {
                connect: args.data.stock,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FollowedCompany)
  async deleteFollowedCompany(
    @graphql.Args() args: DeleteFollowedCompanyArgs
  ): Promise<FollowedCompany | null> {
    try {
      return await this.service.deleteFollowedCompany(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Stock, {
    nullable: true,
    name: "stock",
  })
  async getStock(
    @graphql.Parent() parent: FollowedCompany
  ): Promise<Stock | null> {
    const result = await this.service.getStock(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
