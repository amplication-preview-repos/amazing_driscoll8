/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FollowedCompany as PrismaFollowedCompany,
  Stock as PrismaStock,
} from "@prisma/client";

export class FollowedCompanyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FollowedCompanyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.followedCompany.count(args);
  }

  async followedCompanies(
    args: Prisma.FollowedCompanyFindManyArgs
  ): Promise<PrismaFollowedCompany[]> {
    return this.prisma.followedCompany.findMany(args);
  }
  async followedCompany(
    args: Prisma.FollowedCompanyFindUniqueArgs
  ): Promise<PrismaFollowedCompany | null> {
    return this.prisma.followedCompany.findUnique(args);
  }
  async createFollowedCompany(
    args: Prisma.FollowedCompanyCreateArgs
  ): Promise<PrismaFollowedCompany> {
    return this.prisma.followedCompany.create(args);
  }
  async updateFollowedCompany(
    args: Prisma.FollowedCompanyUpdateArgs
  ): Promise<PrismaFollowedCompany> {
    return this.prisma.followedCompany.update(args);
  }
  async deleteFollowedCompany(
    args: Prisma.FollowedCompanyDeleteArgs
  ): Promise<PrismaFollowedCompany> {
    return this.prisma.followedCompany.delete(args);
  }

  async getStock(parentId: string): Promise<PrismaStock | null> {
    return this.prisma.followedCompany
      .findUnique({
        where: { id: parentId },
      })
      .stock();
  }
}
