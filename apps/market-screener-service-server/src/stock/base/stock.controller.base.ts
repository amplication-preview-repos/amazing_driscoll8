/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StockService } from "../stock.service";
import { StockCreateInput } from "./StockCreateInput";
import { Stock } from "./Stock";
import { StockFindManyArgs } from "./StockFindManyArgs";
import { StockWhereUniqueInput } from "./StockWhereUniqueInput";
import { StockUpdateInput } from "./StockUpdateInput";
import { FollowedCompanyFindManyArgs } from "../../followedCompany/base/FollowedCompanyFindManyArgs";
import { FollowedCompany } from "../../followedCompany/base/FollowedCompany";
import { FollowedCompanyWhereUniqueInput } from "../../followedCompany/base/FollowedCompanyWhereUniqueInput";
import { NewsFindManyArgs } from "../../news/base/NewsFindManyArgs";
import { News } from "../../news/base/News";
import { NewsWhereUniqueInput } from "../../news/base/NewsWhereUniqueInput";
import { PortfolioFindManyArgs } from "../../portfolio/base/PortfolioFindManyArgs";
import { Portfolio } from "../../portfolio/base/Portfolio";
import { PortfolioWhereUniqueInput } from "../../portfolio/base/PortfolioWhereUniqueInput";

export class StockControllerBase {
  constructor(protected readonly service: StockService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Stock })
  async createStock(@common.Body() data: StockCreateInput): Promise<Stock> {
    return await this.service.createStock({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        symbolField: true,
        name: true,
        price: true,
        marketCap: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Stock] })
  @ApiNestedQuery(StockFindManyArgs)
  async stocks(@common.Req() request: Request): Promise<Stock[]> {
    const args = plainToClass(StockFindManyArgs, request.query);
    return this.service.stocks({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        symbolField: true,
        name: true,
        price: true,
        marketCap: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Stock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async stock(
    @common.Param() params: StockWhereUniqueInput
  ): Promise<Stock | null> {
    const result = await this.service.stock({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        symbolField: true,
        name: true,
        price: true,
        marketCap: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Stock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStock(
    @common.Param() params: StockWhereUniqueInput,
    @common.Body() data: StockUpdateInput
  ): Promise<Stock | null> {
    try {
      return await this.service.updateStock({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          symbolField: true,
          name: true,
          price: true,
          marketCap: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Stock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStock(
    @common.Param() params: StockWhereUniqueInput
  ): Promise<Stock | null> {
    try {
      return await this.service.deleteStock({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          symbolField: true,
          name: true,
          price: true,
          marketCap: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/followedCompanies")
  @ApiNestedQuery(FollowedCompanyFindManyArgs)
  async findFollowedCompanies(
    @common.Req() request: Request,
    @common.Param() params: StockWhereUniqueInput
  ): Promise<FollowedCompany[]> {
    const query = plainToClass(FollowedCompanyFindManyArgs, request.query);
    const results = await this.service.findFollowedCompanies(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,

        stock: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/followedCompanies")
  async connectFollowedCompanies(
    @common.Param() params: StockWhereUniqueInput,
    @common.Body() body: FollowedCompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followedCompanies: {
        connect: body,
      },
    };
    await this.service.updateStock({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/followedCompanies")
  async updateFollowedCompanies(
    @common.Param() params: StockWhereUniqueInput,
    @common.Body() body: FollowedCompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followedCompanies: {
        set: body,
      },
    };
    await this.service.updateStock({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/followedCompanies")
  async disconnectFollowedCompanies(
    @common.Param() params: StockWhereUniqueInput,
    @common.Body() body: FollowedCompanyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followedCompanies: {
        disconnect: body,
      },
    };
    await this.service.updateStock({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/newsItems")
  @ApiNestedQuery(NewsFindManyArgs)
  async findNewsItems(
    @common.Req() request: Request,
    @common.Param() params: StockWhereUniqueInput
  ): Promise<News[]> {
    const query = plainToClass(NewsFindManyArgs, request.query);
    const results = await this.service.findNewsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        publishedAt: true,

        stock: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/newsItems")
  async connectNewsItems(
    @common.Param() params: StockWhereUniqueInput,
    @common.Body() body: NewsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      newsItems: {
        connect: body,
      },
    };
    await this.service.updateStock({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/newsItems")
  async updateNewsItems(
    @common.Param() params: StockWhereUniqueInput,
    @common.Body() body: NewsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      newsItems: {
        set: body,
      },
    };
    await this.service.updateStock({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/newsItems")
  async disconnectNewsItems(
    @common.Param() params: StockWhereUniqueInput,
    @common.Body() body: NewsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      newsItems: {
        disconnect: body,
      },
    };
    await this.service.updateStock({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/portfolios")
  @ApiNestedQuery(PortfolioFindManyArgs)
  async findPortfolios(
    @common.Req() request: Request,
    @common.Param() params: StockWhereUniqueInput
  ): Promise<Portfolio[]> {
    const query = plainToClass(PortfolioFindManyArgs, request.query);
    const results = await this.service.findPortfolios(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        userId: true,
        shares: true,
        purchasePrice: true,

        stock: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/portfolios")
  async connectPortfolios(
    @common.Param() params: StockWhereUniqueInput,
    @common.Body() body: PortfolioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portfolios: {
        connect: body,
      },
    };
    await this.service.updateStock({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/portfolios")
  async updatePortfolios(
    @common.Param() params: StockWhereUniqueInput,
    @common.Body() body: PortfolioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portfolios: {
        set: body,
      },
    };
    await this.service.updateStock({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/portfolios")
  async disconnectPortfolios(
    @common.Param() params: StockWhereUniqueInput,
    @common.Body() body: PortfolioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portfolios: {
        disconnect: body,
      },
    };
    await this.service.updateStock({
      where: params,
      data,
      select: { id: true },
    });
  }
}
